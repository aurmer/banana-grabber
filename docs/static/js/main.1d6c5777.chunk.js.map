{"version":3,"sources":["constants.js","utilFunctions.js","redux/reducers/gameState.js","redux/reducers/index.js","redux/actionTypes.js","redux/store.js","components/PlayerWelcomeModal.js","redux/actions.js","components/GameOverModal.js","components/LevelUpModal.js","components/Banana.js","components/GameDisplay.js","App.js","serviceWorker.js","index.js"],"names":["WINDOW_HEIGHT","window","innerHeight","WINDOW_WIDTH","innerWidth","randomXPositionGivenSize","sizeModifier","maxX","Math","floor","random","maxYGivenSize","wait","waitTime","Promise","resolve","setTimeout","initialState","score","gameStarted","gameOver","lives","level","dropDelay","playerName","nextLevelOverlay","playedBananas","queuedBananas","deepCopy","oldObject","JSON","parse","stringify","populateLevelWithBananas","state","count","newState","newBanana","buildBanana","id","animationDuration","speedModifier","pow","replace","c","r","toString","xPosition","value","rotationOffset","incrementGameLevel","combineReducers","gameState","action","type","payload","bananasArray","Object","values","length","movedBanana","banana_id","keys","createStore","rootReducer","PlayerWelcomeModal","props","updateInput","setState","updateInput_Event","e","target","handleSubmit","playerNamed","handleSubmitOnEnter","which","keyCode","render","Modal","show","backdrop","Header","Title","Body","name","onChange","onKeyPress","autoComplete","style","marginLeft","Footer","Button","variant","onClick","React","Component","connect","renderTopScore","highScore","idx","key","replay","scoreList","oldList","localStorage","getItem","newList","sort","a","b","slice","setItem","updateTopScores","map","LevelUpModal","componentDidMount","componentDidUpdate","nextCount","oneLess","document","getElementById","innerHTML","startLevel","animation","centered","border","textAlign","size","className","onAnimationIteration","Banana","bananaClicked","node","clickedBanana","clickedEvent","currentTarget","initializeDrop","transform","initializeDropEvent","transitionEndEvent","missedBanana","bananaContainerStyles","height","width","transitionDuration","bananaImageStyles","onMouseDown","onTransitionEnd","GameDisplay","endlessBananas","nextBanana","then","fetchedBanana","createdBanana","bananaMapper","banana","playedBananaComponent","showStatBoard","statBoard","Toast","position","right","bottom","margin","userSelect","Row","noGutters","Col","backgroundColor","zIndex","overflow","bananasLeft","bananasFetched","notifications","conditional_nodes","push","Boolean","location","hostname","match","rootElement","ReactDOM","store","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1d6c5777.chunk.js","sourcesContent":["\r\nexport const ENTER_KEY = 13\r\n\r\nexport const WINDOW_HEIGHT = window.innerHeight\r\nexport const WINDOW_WIDTH = window.innerWidth\r\nexport const BASE_SIZE = 100\r\nexport const BASE_SPEED = 4\r\nexport const BASE_DELAY = 2\r\nexport const BANANAS_PER_LEVEL = 20\r\nexport const DELAY_LEVEL_DELTA = .75\r\n","import {WINDOW_HEIGHT, WINDOW_WIDTH, BASE_SIZE, BASE_DELAY} from './constants'\r\n\r\nexport const createUUID = () => {\r\n  // eslint-disable-next-line\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n    // eslint-disable-next-line\r\n    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8)\r\n    return v.toString(16)\r\n  })\r\n}\r\n\r\nexport const randomXPositionGivenSize = (sizeModifier) => {\r\n  const maxX = WINDOW_WIDTH-(BASE_SIZE*1.1*sizeModifier)\r\n  return Math.floor( Math.random()*maxX )\r\n}\r\n\r\nexport const maxYGivenSize = (sizeModifier) => {\r\n  const maxY = WINDOW_HEIGHT+(BASE_SIZE*1.1*sizeModifier)\r\n  return maxY\r\n}\r\n\r\nexport const delayGivenLevel = (level) => {\r\n  const waitTime = BASE_DELAY*Math.pow(.9,level)*1000\r\n  return waitTime\r\n}\r\n\r\nexport const wait = waitTime => new Promise(function(resolve) {\r\n  return setTimeout(resolve,waitTime)\r\n})\r\n\r\nexport const updateTopScores = (name,score) => {\r\n  let oldList = window.localStorage.getItem('topScores') || '[]'\r\n  oldList = JSON.parse(oldList)\r\n  let newList = [...oldList, {playerName: name, score: score}]\r\n  newList = newList.sort((a,b) => (b.score-a.score)).slice(0,10)\r\n  window.localStorage.setItem('topScores',JSON.stringify(newList))\r\n\r\n  return newList\r\n}\r\n","import { PLAYER_NAMED, BANANA_MISSED, BANANA_FETCHED, BANANA_CREATED, START_LEVEL, BANANA_CLICKED, REPLAY } from '../actionTypes'\r\nimport { BASE_DELAY, DELAY_LEVEL_DELTA } from '../../constants'\r\nimport { createUUID, randomXPositionGivenSize } from '../../utilFunctions'\r\n\r\nconst initialState = {\r\n  score: 0,\r\n  gameStarted: false,\r\n  gameOver: false,\r\n  lives: 3,\r\n  level: 0,\r\n  dropDelay: BASE_DELAY,\r\n  playerName: '',\r\n  nextLevelOverlay: false,\r\n  playedBananas: {},\r\n  queuedBananas: {\r\n    // banana_UUID: {\r\n    //   id: banana_UUID,\r\n    //   xPosition: xx,\r\n    //   speedModifier: xx,\r\n    //   sizeModifier: xx,\r\n    //   value: 1,\r\n    //   rotationOffset:\r\n    // }\r\n  },\r\n}\r\n\r\nfunction deepCopy (oldObject) {\r\n  return JSON.parse(JSON.stringify(oldObject))\r\n}\r\n\r\nfunction populateLevelWithBananas(state, count) {\r\n  const newState = deepCopy(state)\r\n  const newBanana = buildBanana(newState)\r\n\r\n  if(count > 1) {\r\n    newState.queuedBananas[newBanana.id] = newBanana\r\n    return populateLevelWithBananas(newState, count-1)\r\n  } else if (count === 1) {\r\n    newState.queuedBananas[newBanana.id] = newBanana\r\n    return newState\r\n  }\r\n\r\n}\r\n\r\nfunction calculateBananaCount(level) {\r\n  return level\r\n}\r\n\r\nfunction buildBanana(state,animationDuration) {\r\n  let speedModifier\r\n  if(animationDuration) {\r\n    speedModifier = animationDuration\r\n  } else {\r\n    speedModifier = (1/Math.pow(.9,state.level))\r\n  }\r\n  return {\r\n    id: `banana_${createUUID()}`,\r\n    xPosition: (randomXPositionGivenSize(1)),\r\n    speedModifier: speedModifier,\r\n    sizeModifier: 1,\r\n    value: 1,\r\n    rotationOffset: `${Math.random()*360}deg`\r\n  }\r\n}\r\n\r\nfunction incrementGameLevel(state) {\r\n  let newState = deepCopy(state)\r\n  newState.level++\r\n  newState.dropDelay = BASE_DELAY*Math.pow(DELAY_LEVEL_DELTA,state.level)\r\n  newState.nextLevelOverlay = true\r\n  return newState\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n  let newState = deepCopy(state)\r\n\r\n  switch (action.type) {\r\n    case PLAYER_NAMED: {\r\n      const { playerName } = action.payload\r\n      newState.playerName = playerName\r\n      newState.gameStarted = true\r\n      newState.playedBananas = {}\r\n      newState = incrementGameLevel(newState)\r\n      break\r\n    }\r\n    case START_LEVEL: {\r\n      newState.nextLevelOverlay = false\r\n      newState = populateLevelWithBananas(newState,calculateBananaCount(newState.level))\r\n      break\r\n    }\r\n    case BANANA_FETCHED: {\r\n      const bananasArray = Object.values(newState.queuedBananas)\r\n      if(bananasArray.length) {\r\n        const movedBanana = Object.values(newState.queuedBananas)[0]\r\n        newState.playedBananas[movedBanana.id] = movedBanana\r\n        delete newState.queuedBananas[movedBanana.id]\r\n      }\r\n      break\r\n    }\r\n    case BANANA_CREATED: {\r\n      const newBanana = buildBanana(newState)\r\n      newState.playedBananas[newBanana.id] = newBanana\r\n      break\r\n    }\r\n    case BANANA_CLICKED: {\r\n      const { banana_id } = action.payload\r\n      newState.score += newState.playedBananas[banana_id].value\r\n      delete newState.playedBananas[banana_id]\r\n      if(Object.keys(newState.playedBananas).length === 0 && Object.keys(newState.queuedBananas).length === 0) {\r\n        newState = incrementGameLevel(newState)\r\n      }\r\n      break\r\n    }\r\n    case BANANA_MISSED: {\r\n\r\n      const { banana_id } = action.payload\r\n      delete newState.playedBananas[banana_id]\r\n      if(!newState.gameStarted || newState.gameOver) {break} //this is for the falling banana backdrop on welcome and game over\r\n      newState.lives--\r\n\r\n\r\n      if(newState.lives === 0 ) {\r\n        newState.gameOver = true\r\n        newState.level = 0\r\n        newState.playedBananas = {}\r\n      }\r\n      else if(Object.keys(newState.playedBananas).length === 0 && Object.keys(newState.queuedBananas).length === 0) {\r\n        newState = incrementGameLevel(newState)\r\n      }\r\n      break\r\n    }\r\n    case REPLAY: {\r\n      newState = initialState\r\n      break\r\n    }\r\n    default: {\r\n\r\n    }\r\n  }\r\n  return newState\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport gameState from './gameState'\r\n/* import reducer2 from \"./todos\" */\r\n\r\nexport default combineReducers({ gameState /*, reducer2 */ })\r\n","export const PLAYER_NAMED = 'PLAYER_NAMED'\r\nexport const TOGGLE_TODO = 'TOGGLE_TODO'\r\nexport const BANANA_MISSED = 'BANANA_MISSED'\r\nexport const BANANA_FETCHED = 'BANANA_FETCHED'\r\nexport const BANANA_CLICKED = 'BANANA_CLICKED'\r\nexport const BANANA_CREATED = 'BANANA_CREATED'\r\nexport const REPLAY = 'REPLAY'\r\nexport const START_LEVEL = 'START_LEVEL'\r\n","import { createStore } from 'redux'\r\nimport rootReducer from './reducers'\r\n\r\nexport default createStore(rootReducer)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { playerNamed } from '../redux/actions'\r\nimport { ENTER_KEY } from '../constants'\r\nimport {Modal,Button} from 'react-bootstrap'\r\n\r\nclass PlayerWelcomeModal extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = { playerName: '' }\r\n  }\r\n\r\n  updateInput = playerName => {\r\n    this.setState({ playerName })\r\n  }\r\n  updateInput_Event = e => this.updateInput(e.target.value)\r\n\r\n  handleSubmit = () => {\r\n    this.props.playerNamed(this.state.playerName)\r\n    this.setState({ playerName: '' })\r\n  }\r\n\r\n  handleSubmitOnEnter = e => {\r\n    if (e.which === ENTER_KEY || e.keyCode === ENTER_KEY) {\r\n      this.handleSubmit()\r\n    }\r\n  }\r\n\r\n  render = () =>\r\n    (<Modal show={true} backdrop='static'>\r\n      <Modal.Header>\r\n        <Modal.Title>Welcome To Go, Go, Bananas</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        Enter your player name\r\n        <input\r\n          name='playerName'\r\n          id='playerName'\r\n          value={this.state.playerName}\r\n          onChange={this.updateInput_Event}\r\n          onKeyPress={this.handleSubmitOnEnter}\r\n          autoComplete='off'\r\n          style={{marginLeft:'20px'}}\r\n        />\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"primary\" onClick={this.handleSubmit}>\r\n          Submit\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>)\r\n}\r\n\r\nfunction mapStateToProps (state) {\r\n  return { playerName: state.gameState.playerName }\r\n}\r\n\r\n// export default Todo\r\nexport default connect(\r\n  mapStateToProps,\r\n  { playerNamed }\r\n)(PlayerWelcomeModal)\r\n","import { PLAYER_NAMED, BANANA_MISSED, BANANA_FETCHED, BANANA_CREATED, BANANA_CLICKED, START_LEVEL, REPLAY } from './actionTypes'\r\n\r\nexport const playerNamed = playerName => ({\r\n  type: PLAYER_NAMED,\r\n  payload: { playerName }\r\n})\r\n\r\n\r\n\r\nexport const clickedBanana = id => ({\r\n  type: BANANA_CLICKED,\r\n  payload: { banana_id: id }\r\n})\r\n\r\nexport const missedBanana = id => ({\r\n  type: BANANA_MISSED,\r\n  payload: { banana_id: id }\r\n})\r\n\r\nexport const fetchedBanana = () => ({\r\n  type: BANANA_FETCHED,\r\n  payload: { }\r\n})\r\n\r\nexport const createdBanana = () => ({\r\n  type: BANANA_CREATED,\r\n  payload: { }\r\n})\r\n\r\nexport const replay = () => ({\r\n  type: REPLAY,\r\n  payload: { }\r\n})\r\n\r\nexport const startLevel = () => ({\r\n  type: START_LEVEL,\r\n  payload: { }\r\n})\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { replay } from '../redux/actions'\r\nimport {Modal,Button} from 'react-bootstrap'\r\nimport { updateTopScores } from '../utilFunctions'\r\n\r\nfunction renderTopScore(highScore,idx) {\r\n  return (\r\n    <li key={idx}>{highScore.playerName} - {highScore.score}</li>\r\n  )\r\n}\r\n\r\nfunction GameOverModal (props) {\r\n\r\n  let scoreList = updateTopScores(props.playerName,props.score)\r\n  scoreList = scoreList.map(renderTopScore)\r\n\r\n  return (<Modal show={true} backdrop='static'>\r\n      <Modal.Header>\r\n        <Modal.Title>Game Over</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <h2>Top Scores</h2>\r\n        <ol>\r\n          {scoreList}\r\n        </ol>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"primary\" onClick={props.replay}>\r\n          Replay\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>)\r\n}\r\n\r\nfunction mapStateToProps (state) {\r\n  return {\r\n    playerName: state.gameState.playerName,\r\n    score: state.gameState.score\r\n  }\r\n}\r\n\r\n// export default Todo\r\nexport default connect(\r\n  mapStateToProps,\r\n  { replay }\r\n)(GameOverModal)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { startLevel } from '../redux/actions'\r\nimport {Modal} from 'react-bootstrap'\r\n\r\nclass LevelUpModal extends React.Component {\r\n\r\n  componentDidMount = () => {\r\n  }\r\n\r\n  componentDidUpdate = () => {\r\n  }\r\n\r\n  nextCount = () => {\r\n    const oneLess = document.getElementById('countdown').innerHTML - 1\r\n    if(oneLess === 0) {\r\n      this.props.startLevel()\r\n    } else {\r\n      document.getElementById('countdown').innerHTML = oneLess\r\n    }\r\n\r\n  }\r\n\r\n  render = () => {\r\n    return (<Modal show={true} backdrop={false} animation={false} centered style={{border: 'none',textAlign: 'center'}} size='sm'>\r\n        <Modal.Body>\r\n          <h2>Level {this.props.level}</h2>\r\n          <h1 id='countdown' className='level-number' onAnimationIteration={this.nextCount}>\r\n            3\r\n          </h1>\r\n        </Modal.Body>\r\n      </Modal>)\r\n  }\r\n}\r\n\r\nfunction mapStateToProps (state) {\r\n  return {\r\n    level: state.gameState.level\r\n  }\r\n}\r\n\r\n// export default Todo\r\nexport default connect(\r\n  mapStateToProps,\r\n  { startLevel }\r\n)(LevelUpModal)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { missedBanana, clickedBanana } from '../redux/actions'\r\nimport { BASE_SIZE,BASE_SPEED } from '../constants'\r\nimport { maxYGivenSize } from '../utilFunctions'\r\n\r\nclass Banana extends React.Component {\r\n\r\n  bananaClicked = (node) => {\r\n    this.props.clickedBanana(node.id)\r\n  }\r\n\r\n  clickedEvent = (e) => {\r\n    this.bananaClicked(e.currentTarget)\r\n  }\r\n\r\n  initializeDrop = (node) => {\r\n    if(node) {\r\n      node.style.transform = `translate(${this.props.xPosition}px,${maxYGivenSize(this.props.sizeModifier)}px) rotate(${this.props.rotationOffset})`\r\n    }\r\n  }\r\n\r\n  initializeDropEvent = (e) => this.initializeDrop(e.currentTarget)\r\n\r\n  transitionEndEvent = (e) => {\r\n    this.props.missedBanana(e.currentTarget.id)\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    setTimeout(()=>this.initializeDrop(document.getElementById(this.props.id)),50)\r\n  }\r\n\r\n  render = () => {\r\n    const bananaContainerStyles = {\r\n      height: `${BASE_SIZE*this.props.sizeModifier}px`,\r\n      width: `${BASE_SIZE*this.props.sizeModifier}px`,\r\n      transitionDuration: `${Math.floor(BASE_SPEED/this.props.speedModifier)}s`,\r\n      transform: `translate(${this.props.xPosition}px,${-BASE_SIZE*this.props.sizeModifier}px) rotate(${this.props.rotationOffset})`\r\n    }\r\n\r\n    const bananaImageStyles = {\r\n      animationDuration: `${Math.floor(BASE_SPEED/this.props.speedModifier)}s`\r\n    }\r\n\r\n    return (<>\r\n      <div id={this.props.id}\r\n        className=\"bananaContainer\"\r\n        style={bananaContainerStyles}\r\n        onMouseDown={this.clickedEvent} onTransitionEnd={this.transitionEndEvent}>\r\n        <div className=\"bananaImage\" style={bananaImageStyles} />\r\n      </div>\r\n    </>)\r\n  }\r\n\r\n}\r\n\r\nfunction mapStateToProps (state) {\r\n  return {}\r\n}\r\n\r\n// export default Todo\r\nexport default connect(\r\n  mapStateToProps,\r\n  { missedBanana, clickedBanana }\r\n)(Banana)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport {Row,Col,Toast} from 'react-bootstrap'\r\nimport Banana from './Banana.js'\r\nimport { fetchedBanana, createdBanana } from '../redux/actions'\r\nimport { wait } from '../utilFunctions'\r\n\r\n\r\nclass GameDisplay extends React.Component {\r\n  // constructor (props) {\r\n  //   super(props)\r\n  //\r\n  // }\r\n\r\n  componentDidMount = () => {\r\n    this.setState({endlessBananas: this.endlessBananas()})\r\n    this.setState({nextBanana: this.nextBanana()})\r\n  }\r\n\r\n  nextBanana = () => {\r\n    const waitTime = (this.props.dropDelay)*1000\r\n\r\n    wait(waitTime)\r\n      .then(() => {\r\n        this.props.fetchedBanana()\r\n      })\r\n      .then(this.nextBanana)\r\n  }\r\n\r\n  endlessBananas = () => new Promise(resolve => {\r\n    const waitTime = (.1)*1000\r\n\r\n    wait(waitTime)\r\n      .then(()=>{\r\n        if(!this.props.gameStarted || this.props.gameOver) {\r\n          this.props.createdBanana()\r\n        }\r\n      })\r\n      .then(this.endlessBananas)\r\n    }\r\n  )\r\n\r\n\r\n\r\n  bananaMapper = (banana) => {\r\n    return (<Banana\r\n      {...banana}\r\n      key={banana.id}\r\n      />)\r\n  }\r\n\r\n  render = () => {\r\n\r\n    const {playedBananas} = this.props\r\n    const playedBananaComponent = Object.values(playedBananas).map(this.bananaMapper)\r\n\r\n    const statBoardStyles = {\r\n      position: 'absolute',\r\n      right: '20px',\r\n      bottom: '20px',\r\n      margin: '0'\r\n    }\r\n\r\n    const showStatBoard = this.props.gameStarted\r\n\r\n    const statBoard = (\r\n      <Toast style={statBoardStyles} show={showStatBoard}>\r\n        <Toast.Body style={{userSelect: 'none'}}>\r\n          Go, Go, Bananas <br />\r\n          level: {this.props.level} <br />\r\n          score: {this.props.score} <br />\r\n          lives left: {this.props.lives}\r\n        </Toast.Body>\r\n      </Toast>\r\n    )\r\n\r\n    return (\r\n      <Row noGutters='true'>\r\n          <Col>\r\n            <div style={{height:'100vh',backgroundColor:'rgba(0,0,0,0)',zIndex:'10',position:'relative',overflow:'hidden'}}>\r\n              {statBoard}\r\n              {playedBananaComponent}\r\n            </div>\r\n          </Col>\r\n        </Row>)\r\n    }\r\n}\r\n\r\nfunction mapStateToProps (state) {\r\n  return {\r\n    score: state.gameState.score,\r\n    lives: state.gameState.lives,\r\n    playedBananas: state.gameState.playedBananas,\r\n    level: state.gameState.level,\r\n    dropDelay: state.gameState.dropDelay,\r\n    gameStarted: state.gameState.gameStarted,\r\n    gameOver: state.gameState.gameOver,\r\n    bananasLeft: Object.keys(state.gameState.queuedBananas).length,\r\n    bananasFetched: Object.keys(state.gameState.playedBananas).length\r\n  }\r\n}\r\n\r\n// export default Todo\r\nexport default connect(\r\n  mapStateToProps,\r\n  { fetchedBanana, createdBanana }\r\n)(GameDisplay)\r\n","import React from 'react'\r\nimport PlayerWelcomeModal from './components/PlayerWelcomeModal'\r\nimport GameOverModal from './components/GameOverModal'\r\nimport LevelUpModal from './components/LevelUpModal'\r\nimport GameDisplay from './components/GameDisplay'\r\nimport './App.css'\r\nimport { connect } from 'react-redux'\r\n\r\nfunction App (props) {\r\n  let conditional_nodes = []\r\n  if(props.gameStarted === false) {\r\n    conditional_nodes.push(<PlayerWelcomeModal key=\"welcome\" />)\r\n  }\r\n  if(props.notifications === true) {\r\n    conditional_nodes.push(<></>)\r\n  }\r\n  if(props.gameOver === true) {\r\n    conditional_nodes.push(<GameOverModal key=\"gameover\" />)\r\n  }\r\n  if(props.nextLevelOverlay === true) {\r\n    conditional_nodes.push(<LevelUpModal key=\"levelup\" />)\r\n  }\r\n\r\n  return (<>\r\n      {conditional_nodes}\r\n      <GameDisplay />\r\n    </>\r\n  )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    gameStarted: state.gameState.gameStarted,\r\n    notifications: false,\r\n    gameOver: state.gameState.gameOver,\r\n    nextLevelOverlay: state.gameState.nextLevelOverlay\r\n  }\r\n}\r\n\r\n// export default Todo\r\nexport default connect(\r\n  mapStateToProps\r\n)(App)\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\nexport function register (config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport { Provider } from 'react-redux'\r\nimport store from './redux/store'\r\n\r\nimport './index.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n// import 'bootstrap/dist/css/bootstrap-theme.min.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nconst rootElement = document.getElementById('root')\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  rootElement\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}